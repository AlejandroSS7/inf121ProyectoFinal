/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proy121verano;

import java.awt.*;
import java.sql.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FRANKLIN
 */
public class interfaz extends javax.swing.JFrame {

    private Connection connection;

    /**
     * Creates new form interfaz
     */
    public interfaz() {
        this.connection = connection;
        initUI();
    }

    private void initUI() {
        JFrame frame = new JFrame("Gestión de Restaurante");
        frame.setSize(700, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        // Crear barra de menú
        JMenuBar menuBar = new JMenuBar();

        // Menú Cliente
        JMenu menuCliente = new JMenu("Cliente");
        JMenuItem itemCambiarNombreCliente = new JMenuItem("Cambiar Nombre de Cliente");
        JMenuItem itemVerClientes = new JMenuItem("Ver Clientes");
        JMenuItem itemEliminarCliente = new JMenuItem("Eliminar Cliente");
        JMenuItem itemBuscarCliente = new JMenuItem("Buscar Cliente");
        JMenuItem itemSalir = new JMenuItem("Salir");

        itemCambiarNombreCliente.addActionListener(e -> cambiarNombreCliente());
        itemVerClientes.addActionListener(e -> verClientes());
        itemEliminarCliente.addActionListener(e -> eliminarCliente());
        itemBuscarCliente.addActionListener(e -> buscarCliente());
        itemSalir.addActionListener(e -> System.exit(0));

        menuCliente.add(itemCambiarNombreCliente);
        menuCliente.add(itemVerClientes);
        menuCliente.add(itemEliminarCliente);
        menuCliente.add(itemBuscarCliente);
        menuCliente.addSeparator();
        menuCliente.add(itemSalir);

        // Menú Empleado
        JMenu menuEmpleado = new JMenu("Empleado");
        JMenuItem itemCambiarNombreEmpleado = new JMenuItem("Cambiar Nombre de Empleado");
        JMenuItem itemVerEmpleados = new JMenuItem("Ver Empleados");
        JMenuItem itemEliminarEmpleado = new JMenuItem("Eliminar Empleado");
        JMenuItem itemBuscarEmpleado = new JMenuItem("Buscar Empleado");

        itemCambiarNombreEmpleado.addActionListener(e -> cambiarNombreEmpleado());
        itemVerEmpleados.addActionListener(e -> verEmpleados());
        itemEliminarEmpleado.addActionListener(e -> eliminarEmpleado());
        itemBuscarEmpleado.addActionListener(e -> buscarEmpleado());

        menuEmpleado.add(itemCambiarNombreEmpleado);
        menuEmpleado.add(itemVerEmpleados);
        menuEmpleado.add(itemEliminarEmpleado);
        menuEmpleado.add(itemBuscarEmpleado);

        // Añadir menús a la barra de menú
        menuBar.add(menuCliente);
        menuBar.add(menuEmpleado);

        // Panel central con botones
        JPanel centralPanel = new JPanel();
        centralPanel.setLayout(new GridLayout(5, 2, 10, 10)); // 5 filas, 2 columnas con espaciado

        JButton btnCuentaTotalMesa = new JButton("Cuenta Total de Mesa");
        JButton btnAgregarDescuento = new JButton("Agregar Descuento a Cuenta");
        JButton btnListarPlatosVendidos = new JButton("Listar Platos Más Vendidos");
        JButton btnListarMesasDisponibles = new JButton("Listar Mesas Disponibles");

        btnCuentaTotalMesa.addActionListener(e -> calcularCuentaMesaX());
        btnAgregarDescuento.addActionListener(e -> agregarDescuento());
        btnListarPlatosVendidos.addActionListener(e -> listarPlatosMasVendidos());
        btnListarMesasDisponibles.addActionListener(e -> listarMesasDisponibles());

        centralPanel.add(btnCuentaTotalMesa);
        centralPanel.add(btnAgregarDescuento);
        centralPanel.add(btnListarPlatosVendidos);
        centralPanel.add(btnListarMesasDisponibles);

        // Contenedor principal
        JPanel container = new JPanel(new BorderLayout());
        container.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        container.add(centralPanel, BorderLayout.CENTER);

        frame.add(container, BorderLayout.CENTER);
        frame.setJMenuBar(menuBar);
        frame.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 333, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 174, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RegistrarPedidoActionPerformed(java.awt.event.ActionEvent evt) {
        //id autoincremental, cliente_id, total
        String query = "INSERT INTO pedidos (cliente_id, total) V LUES (?, ?)";
        try (Connection conn = GestorRestaurante.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, 1); // Assuming the client ID is 1
            stmt.setDouble(2, 0.0); // Assuming the total is 0.0
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "Pedido registrado", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error registrando pedido: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void registrarCliente() {

    }

    private void verClientes() {
        Connection conn = null;
        try {
            // Conexión a la base de datos
            conn = GestorRestaurante.getConnection();

            // Consulta SQL para obtener los datos de los clientes
            String query = "SELECT * FROM clientes";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            // Crear un JTable con modelo por defecto
            JTable table = new JTable();
            DefaultTableModel model = new DefaultTableModel();

            // Añadir las columnas al modelo
            model.addColumn("ID");
            model.addColumn("Nombre");

            // Rellenar las filas del modelo con los datos del ResultSet
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"), // ID del cliente
                    rs.getString("nombre") // Nombre del cliente
                });
            }

            // Establecer el modelo al JTable
            table.setModel(model);

            // Mostrar el JTable dentro de un JOptionPane con scroll
            JOptionPane.showMessageDialog(
                    null,
                    new JScrollPane(table),
                    "Clientes",
                    JOptionPane.INFORMATION_MESSAGE
            );
        } catch (SQLException e) {
            // Mostrar error si ocurre algún problema con la base de datos
            JOptionPane.showMessageDialog(
                    null,
                    "Error al consultar clientes: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        } finally {
            try {
                if (conn != null) {
                    conn.close(); // Cerrar la conexión
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(
                        null,
                        "Error al cerrar la conexión: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        }
    }

    private void verRestaurante() {

    }

    private void buscarCliente() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void eliminarCliente() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void agregarDescuento() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void listarMesasDisponibles() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void calcularCuentaMesaX() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void listarPlatosMasVendidos() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void cambiarNombreCliente() {
        String idCliente = JOptionPane.showInputDialog("Ingrese el ID del Cliente:");
        String nuevoNombre = JOptionPane.showInputDialog("Ingrese el nuevo nombre:");

        String query = "UPDATE Cliente SET nombre = ? WHERE id_cliente = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, nuevoNombre);
            stmt.setString(2, idCliente);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Nombre actualizado correctamente.");
            } else {
                JOptionPane.showMessageDialog(null, "Cliente no encontrado.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al actualizar el nombre: " + e.getMessage());
        }
    }

    private void cambiarNombreEmpleado() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void verEmpleados() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void buscarEmpleado() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void eliminarEmpleado() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
